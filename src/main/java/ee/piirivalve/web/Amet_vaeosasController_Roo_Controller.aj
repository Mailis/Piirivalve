// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.piirivalve.web;

import ee.piirivalve.entities.Amet_vaeosas;
import ee.piirivalve.entities.Vaeosa;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect Amet_vaeosasController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String Amet_vaeosasController.create(@Valid Amet_vaeosas amet_vaeosas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("amet_vaeosas", amet_vaeosas);
            addDateTimeFormatPatterns(uiModel);
            return "amet_vaeosases/create";
        }
        uiModel.asMap().clear();
        amet_vaeosas.persist();
        return "redirect:/amet_vaeosases/" + encodeUrlPathSegment(amet_vaeosas.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String Amet_vaeosasController.createForm(Model uiModel) {
        uiModel.addAttribute("amet_vaeosas", new Amet_vaeosas());
        addDateTimeFormatPatterns(uiModel);
        return "amet_vaeosases/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String Amet_vaeosasController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("amet_vaeosas", Amet_vaeosas.findAmet_vaeosas(id));
        uiModel.addAttribute("itemId", id);
        return "amet_vaeosases/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String Amet_vaeosasController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("amet_vaeosases", Amet_vaeosas.findAmet_vaeosasEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Amet_vaeosas.countAmet_vaeosases() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("amet_vaeosases", Amet_vaeosas.findAllAmet_vaeosases());
        }
        addDateTimeFormatPatterns(uiModel);
        return "amet_vaeosases/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String Amet_vaeosasController.update(@Valid Amet_vaeosas amet_vaeosas, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("amet_vaeosas", amet_vaeosas);
            addDateTimeFormatPatterns(uiModel);
            return "amet_vaeosases/update";
        }
        uiModel.asMap().clear();
        amet_vaeosas.merge();
        return "redirect:/amet_vaeosases/" + encodeUrlPathSegment(amet_vaeosas.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String Amet_vaeosasController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("amet_vaeosas", Amet_vaeosas.findAmet_vaeosas(id));
        addDateTimeFormatPatterns(uiModel);
        return "amet_vaeosases/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String Amet_vaeosasController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Amet_vaeosas.findAmet_vaeosas(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/amet_vaeosases";
    }
    
    @ModelAttribute("amet_vaeosases")
    public Collection<Amet_vaeosas> Amet_vaeosasController.populateAmet_vaeosases() {
        return Amet_vaeosas.findAllAmet_vaeosases();
    }
    
    @ModelAttribute("vaeosas")
    public Collection<Vaeosa> Amet_vaeosasController.populateVaeosas() {
        return Vaeosa.findAllVaeosas();
    }
    
    void Amet_vaeosasController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("amet_vaeosas_avatud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("amet_vaeosas_muudetud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("amet_vaeosas_suletud_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("amet_vaeosas_alates_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("amet_vaeosas_kuni_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    String Amet_vaeosasController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
